package com.zjhc.sgsb.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.zjhc.sgsb.common.Constant;
import com.zjhc.sgsb.common.InterfaceResult;
import com.zjhc.sgsb.entity.CatalogTemplate;
import com.zjhc.sgsb.entity.ResourceCatalog;
import com.zjhc.sgsb.entity.UserInfo;
import com.zjhc.sgsb.mapper.CatalogTemplateMapper;
import com.zjhc.sgsb.service.ICatalogTemplateService;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.zjhc.sgsb.util.ExcelUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.tools.ant.util.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * 信息目录模板字段 服务实现类
 * </p>
 *
 * @author wusj
 * @since 2020-04-22
 */
@Service
@Transactional
public class CatalogTemplateServiceImpl extends ServiceImpl<CatalogTemplateMapper, CatalogTemplate> implements ICatalogTemplateService {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private CatalogTemplateMapper catalogTemplateMapper;

    @Autowired
    private ICatalogTemplateService catalogTemplateService;


    public InterfaceResult<String> addCatalogTemplatePage(UserInfo userInfo, List<CatalogTemplate> templateList){
        if (templateList != null && templateList.size() > 0){
            templateList.forEach( catalogTemplate -> {
                catalogTemplate.setCreateUser(userInfo.getUsername());
                catalogTemplate.setCreateDept(userInfo.getDeptCode());
                catalogTemplate.setCreateTime(LocalDateTime.now());
            });
            catalogTemplateService.saveBatch(templateList);
            return InterfaceResult.getError("操作成功!");
        }
        return InterfaceResult.getError("操作失败!");
    }

    public InterfaceResult<String> addCatalogTemplateExcel(UserInfo userInfo, MultipartFile excel) throws IOException{
        LinkedList<LinkedList<Object>> templateList = ExcelUtil.getExcelToList(excel.getInputStream(), Constant.EXCEL_FILE_TYPE);
        if (templateList.size() > 1){
            List<CatalogTemplate> catalogTemplateList = Lists.newArrayList();
            for (int index = 1; index<templateList.size(); index++){
                CatalogTemplate catalogTemplate = new CatalogTemplate();
                LinkedList<Object> ele = templateList.get(index);
                catalogTemplate.setColName(ele.get(0).toString());
                catalogTemplate.setColDesc(ele.get(1).toString());
//                catalogTemplate.setCatalogCode("testCode");
//                catalogTemplate.setDeptCode("testCode");
                catalogTemplate.setCreateUser(userInfo.getUsername());
                catalogTemplate.setCreateDept(userInfo.getDeptCode());
                catalogTemplate.setCreateTime(LocalDateTime.now());
                catalogTemplateList.add(catalogTemplate);
            }
            catalogTemplateService.saveBatch(catalogTemplateList);
            return InterfaceResult.getError("操作成功!");
        }
        return InterfaceResult.getError("操作失败!");
    }

    public InterfaceResult<byte[]> uploadTemplate(ResourceCatalog catalog, HttpServletResponse response) throws IOException{
        QueryWrapper<CatalogTemplate> wrapper = new QueryWrapper<>();
        wrapper.select("col_name","col_desc");
        wrapper.eq("catalog_code",catalog.getCatalogCode());
        wrapper.eq("is_delete",1);
        wrapper.last("order by orderby DESC, id ASC");
        List<CatalogTemplate> templateList = catalogTemplateService.list(wrapper);
        if (templateList == null || templateList.size() == 0){
            return InterfaceResult.getError("模板生成失败,未查询到有效字段!");
        }
        List<Map<String, Object>> template = Lists.newArrayList();
        templateList.forEach(catalogTemplate -> {
            Map<String, Object> ele = Maps.newHashMap();
            ele.put("col_desc",catalogTemplate.getColDesc());
            template.add(ele);
        });
        HSSFWorkbook tempExcel = ExcelUtil.createTempExcel(template);
        OutputStream output=response.getOutputStream();
        response.reset();
        response.setHeader("Content-disposition", "attachment; filename=template.xls");
        response.setContentType("application/msexcel");
        tempExcel.write(output);
        output.close();
        return null;
    }

}
